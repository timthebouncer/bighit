---
interface Props {
  id: string;
  title?: string;
  closeText?: string;
  isOpen?: boolean;
}

const { id, title, closeText = 'Close', isOpen = false } = Astro.props;
---

<div
  id={id}
  class={`
    fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50
    transition-opacity duration-200
    ${isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}
  `}
  role="dialog"
  aria-labelledby={`${id}-title`}
>
  <div class="relative w-full">
    <!-- Modal header -->
    {
      title && (
        <div class="flex items-center justify-between p-4 border-b rounded-t dark:border-gray-600">
          <h3 class="text-xl font-semibold text-gray-900 dark:text-white" id={`${id}-title`}>
            {title}
          </h3>
          <button
            type="button"
            class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
            data-modal-close
          >
            <svg class="w-3 h-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
              <path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"
              />
            </svg>
            <span class="sr-only">{closeText}</span>
          </button>
        </div>
      )
    }

    <!-- Modal body -->
    <div class="p-6 flex justify-center items-center">
      <slot />
    </div>
  </div>
</div>

<!-- <script define:vars={{ id }}>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById(id);

    // Close when clicking outside the modal
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('opacity-0', 'pointer-events-none');
        document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      }
    });

    // Add global method to show this modal
    window.showModal = window.showModal || {};
    window.showModal[id] = () => {
      modal?.classList.remove('opacity-0', 'pointer-events-none');
    };
  });
  document.removeEventListener('DOMContentLoaded', () => {
    console.log('DOMContentUnLoaded');
  });
</script> -->
